/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./lib/paginationField.js":
/*!********************************!*\
  !*** ./lib/paginationField.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ paginationField; }\n/* harmony export */ });\n/* harmony import */ var _components_Pagination__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/Pagination */ \"./components/Pagination.js\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n// import { PAGINATION_QUERY } from '../components/Pagination';\n// export default function paginationField() {\n//   return {\n//     keyArgs: false,\n//     read(existing = [], { args, cache }) {\n//       console.log({ existing, args, cache });\n//       const { skip, first } = args;\n//       // read the number of item in the page from the cache\n//       const data = cache.readQuery({ query: PAGINATION_QUERY });\n//       console.log(data);\n//       const count = data?.allProductsMeta?.count;\n//       const page = skip / first + 1;\n//       const pages = Math.ceil(count / first);\n//       // check if we have existing items\n//       const items = existing.slice(skip, skip + first).filter((x) => x);\n//       if (items.length && items.length !== first && page === pages) {\n//         return items;\n//       }\n//       if (items.length !== first) {\n//         // we dont havre any items, we mist got to the network to fetch them\n//         return false;\n//       }\n//       if (items.length) {\n//         console.log(\n//           `There are ${items.length} items in the cache! Gonna send them to apollo `\n//         );\n//         return items; // fallback to network\n//       }\n//       return false;\n//       // first thing it does is ask the read function for those items.\n//     },\n//     merge(existing, incoming, { args }) {\n//       const { skip, first } = args;\n//       // this runs when the appolo client comes back from the network with our product\n//       console.log(`merging items from the network ${incoming.length}`);\n//       const merged = existing ? existing.slice(0) : [];\n//       for (let i = skip; i < skip + incoming.length; ++i) {\n//         merged[i] = incoming[i - skip];\n//       }\n//       return merged;\n//     },\n//   };\n// }\n\nfunction paginationField() {\n  return {\n    keyArgs: false,\n    // tells apollo we will take care of everything\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      // console.log({ existing, args, cache });\n      var skip = args.skip,\n          first = args.first; // Read the number of items on the page from the cache\n\n      var data = cache.readQuery({\n        query: _components_Pagination__WEBPACK_IMPORTED_MODULE_0__.PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pages = Math.ceil(count / first); // Check if we have existing items\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      }); // If\n      // There are items\n      // AND there aren't enough items to satisfy how many were requested\n      // AND we are on the last page\n      // THEN JUST SEND IT\n\n      if (items.length && items.length !== first && page === pages) {\n        return items;\n      }\n\n      if (items.length !== first) {\n        // We don't have any items, we must go to the network to fetch them\n        return false;\n      } // If there are items, just reutrn them from the cache, and we don't need to go to the network\n\n\n      if (items.length) {\n        // console.log(\n        //   `There are ${items.length} items in the cache! Gonna send them to apollo`\n        // );\n        return items;\n      }\n\n      return false; // fallback to network\n      // First thing it does it asks the read function for those items.\n      // We can either do one of two things:\n      // First things we can do is return the items because they are already in the cache\n      // The other thing we can do is to return false from here, (network request)\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var skip = args.skip,\n          first = args.first; // This runs when the Apollo client comes back from the network with our product\n      // console.log(`MErging items from the network ${incoming.length}`);\n\n      var merged = existing ? existing.slice(0) : [];\n\n      for (var i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      } // console.log(merged);\n      // Finally we return the merged items from the cache,\n\n\n      return merged;\n    }\n  };\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/paginationField.js\n");

/***/ })

});